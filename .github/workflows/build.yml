name: 构建多平台安装包

on:
  push:
    branches:
      - main
      - release/*
    tags:
      - 'v*'
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version:
        description: '版本号 (例如: 1.0.0)'
        required: false
        default: 'auto'

permissions:
  contents: write
  packages: write
  issues: write
  pull-requests: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      - name: 获取版本号
        id: get_version
        run: |
          if [[ "${{ github.event.inputs.version }}" != "auto" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: 安装依赖
        run: npm ci --prefer-offline --no-audit
      
      - name: 构建 Linux 版本
        run: npm run build
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
      
      - name: 上传 Linux 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          if-no-files-found: error
          
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      - name: 获取版本号
        id: get_version
        run: |
          if ("${{ github.event.inputs.version }}" -ne "auto" -and "${{ github.event.inputs.version }}" -ne "") {
            echo "version=${{ github.event.inputs.version }}" >> $env:GITHUB_OUTPUT
          } elseif ("${{ github.ref_type }}" -eq "tag") {
            echo "version=$($env:GITHUB_REF -replace 'refs/tags/v', '')" >> $env:GITHUB_OUTPUT
          } else {
            echo "version=$(node -p "require('./package.json').version")" >> $env:GITHUB_OUTPUT
          }
        shell: pwsh
      
      - name: 安装依赖
        run: npm ci --prefer-offline --no-audit
      
      - name: 构建 Windows 版本
        run: npm run build:win
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
      
      - name: 上传 Windows 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: |
            dist/*.exe
            dist/*.msi
            dist/*.zip
          if-no-files-found: error
          
  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'
      
      - name: 获取版本号
        id: get_version
        run: |
          if [[ "${{ github.event.inputs.version }}" != "auto" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: 安装依赖
        run: npm ci --prefer-offline --no-audit
      
      - name: 构建 macOS 版本
        run: npm run build:mac
        env:
          VERSION: ${{ steps.get_version.outputs.version }}
      
      - name: 上传 macOS 构建产物
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: |
            dist/*.dmg
            dist/*.zip
          if-no-files-found: error
          
  create-release:
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    if: always() && (startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch')
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 获取版本号
        id: get_version
        run: |
          if [[ "${{ github.event.inputs.version }}" != "auto" && "${{ github.event.inputs.version }}" != "" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT
          fi
        shell: bash
      
      - name: 获取当前日期
        id: date
        run: echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
      
      - name: 下载所有构建产物
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts
      
      - name: 重命名文件
        run: |
          mkdir -p release-files
          VERSION="${{ steps.get_version.outputs.version }}"
          echo "Looking for build artifacts..."
          find all-artifacts -type f -name "*.*" -not -path "*/\.*" | sort
          
          # Check if any files were found
          if [ -z "$(find all-artifacts -type f -name "*.*" -not -path "*/\.*")" ]; then
            echo "No build artifacts found. Creating dummy file to prevent release failure."
            echo "Build artifacts not available. Please check the build logs." > release-files/README.txt
          else
            # Process found files
            find all-artifacts -type f -name "*.*" -not -path "*/\.*" | while read file; do
              filename=$(basename "$file")
              extension="${filename##*.}"
              platform="unknown"
              
              if [[ "$file" == *linux* || "$file" == *AppImage* || "$file" == *deb* || "$file" == *rpm* ]]; then
                platform="linux"
              elif [[ "$file" == *win* || "$file" == *exe* || "$file" == *msi* ]]; then
                platform="windows"
              elif [[ "$file" == *mac* || "$file" == *dmg* || "$file" == *zip* ]]; then
                platform="mac"
              fi
              
              echo "Processing file: $file -> multi-account-browser-${VERSION}-${platform}.${extension}"
              cp "$file" "release-files/multi-account-browser-${VERSION}-${platform}.${extension}"
            done
          fi
          
          # List processed files
          echo "\nFiles ready for release:"
          ls -la release-files/
      
      - name: 生成发行说明
        id: changelog
        run: |
          # 中文版本
          echo "# 多账号浏览器 v${{ steps.get_version.outputs.version }}" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## 中文 | [English](#multi-account-browser-v${{ steps.get_version.outputs.version }})" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 更新内容" >> CHANGELOG.md        
          echo "- 改进了指纹防护系统，添加了随机种子一致性机制" >> CHANGELOG.md
          echo "- 增强了Canvas、音频和WebRTC指纹防护功能" >> CHANGELOG.md
          echo "- 修复了RECTS矩形防护配置的保存和加载问题" >> CHANGELOG.md
          echo "- 为新配置文件添加了自动随机种子生成功能" >> CHANGELOG.md
          echo "- 提高了多个浏览器实例之间的指纹一致性" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### 下载地址" >> CHANGELOG.md
          echo "- [Windows 版本](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/multi-account-browser-${{ steps.get_version.outputs.version }}-windows.exe)" >> CHANGELOG.md
          echo "- [macOS 版本](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/multi-account-browser-${{ steps.get_version.outputs.version }}-mac.dmg)" >> CHANGELOG.md
          echo "- [Linux 版本](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/multi-account-browser-${{ steps.get_version.outputs.version }}-linux.AppImage)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          
          # 英文版本
          echo "---" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "# Multi-Account Browser v${{ steps.get_version.outputs.version }}" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## English | [中文](#多账号浏览器-v${{ steps.get_version.outputs.version }})" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Updates" >> CHANGELOG.md       
          echo "- Improved fingerprint protection with consistent random seed mechanism" >> CHANGELOG.md
          echo "- Enhanced Canvas, Audio and WebRTC fingerprint protection" >> CHANGELOG.md
          echo "- Fixed RECTS protection configuration saving and loading" >> CHANGELOG.md
          echo "- Added automatic random seed generation for new profiles" >> CHANGELOG.md
          echo "- Improved fingerprint consistency across multiple browser instances" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Downloads" >> CHANGELOG.md
          echo "- [Windows Version](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/multi-account-browser-${{ steps.get_version.outputs.version }}-windows.exe)" >> CHANGELOG.md
          echo "- [macOS Version](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/multi-account-browser-${{ steps.get_version.outputs.version }}-mac.dmg)" >> CHANGELOG.md
          echo "- [Linux Version](https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/multi-account-browser-${{ steps.get_version.outputs.version }}-linux.AppImage)" >> CHANGELOG.md
      
      - name: 创建发布 (标签触发)
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: CHANGELOG.md
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 创建发布 (手动触发)
        uses: softprops/action-gh-release@v1
        if: github.event_name == 'workflow_dispatch'
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: 多账号浏览器 v${{ steps.get_version.outputs.version }}
          body_path: CHANGELOG.md
          files: release-files/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
