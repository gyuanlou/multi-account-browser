const { contextBridge, ipcRenderer } = require('electron');

// 暴露安全的 API 到渲染进程
contextBridge.exposeInMainWorld('ipcRenderer', {
  // 配置文件管理
  getProfiles: () => ipcRenderer.invoke('get-profiles'),
  saveProfile: (profile) => ipcRenderer.invoke('save-profile', profile),
  deleteProfile: (profileId) => ipcRenderer.invoke('delete-profile', profileId),
  
  // 浏览器实例管理
  launchBrowser: (profileId) => ipcRenderer.invoke('launch-browser', profileId),
  closeBrowser: (profileId) => ipcRenderer.invoke('close-browser', profileId),
  getRunningInstances: () => ipcRenderer.invoke('get-running-instances'),
  
  // 代理管理
  testProxy: (proxyConfig) => ipcRenderer.invoke('test-proxy', proxyConfig),
  
  // 地理位置服务
  getLocationFromIP: (ip) => ipcRenderer.invoke('get-location-from-ip', ip),
  getCountries: () => ipcRenderer.invoke('get-countries'),
  getCities: (countryCode) => ipcRenderer.invoke('get-cities', countryCode),
  getTimezones: () => ipcRenderer.invoke('get-timezones'),
  
  // 指纹管理
  generateFingerprint: (options) => ipcRenderer.invoke('generate-fingerprint', options),
  
  // 自动化
  runAutomationScript: (profileId, script) => ipcRenderer.invoke('run-automation-script', profileId, script),
  
  // Cookie 管理
  getCookies: (profileId, url) => ipcRenderer.invoke('get-cookies', profileId, url),
  setCookie: (data) => ipcRenderer.invoke('set-cookie', data),
  deleteCookie: (data) => ipcRenderer.invoke('delete-cookie', data),
  deleteDomainCookies: (data) => ipcRenderer.invoke('delete-domain-cookies', data),
  clearCookies: (profileId, url) => ipcRenderer.invoke('clear-cookies', profileId, url),
  exportCookies: (profileId, filePath, url) => ipcRenderer.invoke('export-cookies', profileId, filePath, url),
  importCookies: (profileId, filePath) => ipcRenderer.invoke('import-cookies', profileId, filePath),
  
  // 截图功能
  captureScreenshot: (profileId) => ipcRenderer.invoke('capture-screenshot', profileId),
  
  // 指纹测试
  testFingerprintProtection: (profileId) => ipcRenderer.invoke('test-fingerprint-protection', profileId),
  
  // 系统事件
  onProfileUpdate: (callback) => ipcRenderer.on('profile-update', callback),
  onBrowserStateChange: (callback) => ipcRenderer.on('browser-state-change', callback)
});
